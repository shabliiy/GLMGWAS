kable(comparison_table, caption = "Comparison of Key Statistical Distributions")
# install.packages("DiagrammeR") # Uncomment this line if installing for the first time
library(DiagrammeR)
grViz("
digraph relationships {
graph [layout = dot, rankdir = LR]
# Nodes with different fill and border colors
binomial [label = 'Binomial', shape = oval, style=filled, fillcolor=lightblue, color=blue]
poisson [label = 'Poisson', shape = oval, style=filled, fillcolor=lightseagreen, color=green]
normal [label = 'Normal (N)', shape = oval, style=filled, fillcolor=gold, color=orange]
chisquare [label = 'Chi-Square (X²)', shape = oval, style=filled, fillcolor=plum, color=purple]
f [label = 'F', shape = oval, style=filled, fillcolor=coral, color=red]
t [label = 't', shape = oval, style=filled, fillcolor=dodgerblue, color=darkblue]
# Connections with customized edge colors
binomial -> normal [label = 'CLT', color=blue]
poisson -> normal [label = 'CLT', color=green]
chisquare -> normal [label = 'CLT', color=purple]
f -> normal [label = 'Approximates', color=red]
t -> normal [label = 'Approximates', color=dodgerblue]
chisquare -> f [label = 'Ratio of X²', color=orange]
normal -> t [label = 't from Z', color=darkblue]
normal -> chisquare [label = 'Sum of Z²', color=gold]
}
")
# Parameters
n <- 10
p <- 0.5
# Generate binomial data
binom_data <- rbinom(1000, size = n, prob = p)
# Plot
hist(binom_data, breaks = 10, main = "Binomial Distribution", xlab = "Number of Successes", col = "skyblue")
# 1.1 Galton Board
# Set the number of simulations (balls) and trials (layers)
k <- 10000  # number of balls (simulations)
n <- 7      # number of trials (layers)
p <- 0.5    # probability of success
# Generate binomial data and plot histogram for 5 trials with probability 0.5
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=5, p=0.5", xlab = "Number of Successes", col = "lightblue", border = "black")
# 1.1 Galton Board
# Set the number of simulations (balls) and trials (layers)
k <- 10000  # number of balls (simulations)
n <- 5      # number of trials (layers)
p <- 0.5    # probability of success
# Generate binomial data and plot histogram for 5 trials with probability 0.5
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=5, p=0.5", xlab = "Number of Successes", col = "lightblue", border = "black")
# 1.1 Galton Board
# Set the number of simulations (balls) and trials (layers)
k <- 10000  # number of balls (simulations)
n <- 5      # number of trials (layers)
p <- 0.4    # probability of success
# Generate binomial data and plot histogram for 5 trials with probability 0.5
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=5, p=0.5", xlab = "Number of Successes", col = "lightblue", border = "black")
# 1.1 Galton Board
# Set the number of simulations (balls) and trials (layers)
k <- 10000  # number of balls (simulations)
n <- 5      # number of trials (layers)
p <- 0.5    # probability of success
# Generate binomial data and plot histogram for 5 trials with probability 0.5
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=5, p=0.5", xlab = "Number of Successes", col = "lightblue", border = "black")
# 1.1 Galton Board
# Set the number of simulations (balls) and trials (layers)
k <- 10000  # number of balls (simulations)
n <- 5      # number of trials (layers)
p <- 0.5    # probability of success
# Generate binomial data and plot histogram for 5 trials with probability 0.5
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=5, p=0.5", xlab = "Number of Successes", col = "lightblue", border = "black")
# 1.1 Galton Board
# Set the number of simulations (balls) and trials (layers)
k <- 10000  # number of balls (simulations)
n <- 5      # number of trials (layers)
p <- 0.4    # probability of success
# Generate binomial data and plot histogram for 5 trials with probability 0.5
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=5, p=0.5", xlab = "Number of Successes", col = "lightblue", border = "black")
# 1.1 Galton Board
# Set the number of simulations (balls) and trials (layers)
k <- 10000  # number of balls (simulations)
n <- 5      # number of trials (layers)
p <- 0.5    # probability of success
# Generate binomial data and plot histogram for 5 trials with probability 0.5
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=5, p=0.5", xlab = "Number of Successes", col = "lightblue", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.3  # update probability
n <- 200  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.3  # update probability
n <- 200  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.4  # update probability
n <- 200  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.7  # update probability
n <- 200  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.5  # update probability
n <- 200  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.5  # update probability
n <- 1000  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.4  # update probability
n <- 1000  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.7  # update probability
n <- 1000  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.4  # update probability
n <- 200  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# 1.2 Different Probability of Success
# Change parameters for another binomial distribution (5 trials, probability 0.4)
p <- 0.4  # update probability
n <- 200  # number of trials (layers)
x <- rbinom(k, n, p)
hist(x, main = "Binomial Distribution: n=200, p=0.4", xlab = "Number of Successes", col = "lightgreen", border = "black")
# Run the application
shinyApp(ui = ui, server = server)
install.packages(shiny)
install.packages('shiny')
install.packages("shiny")
install.packages("shiny")
# Define UI for random distribution app ----
ui <- fluidPage(
sidebarPanel(
# Input: Select the random distribution type ----
radioButtons("deck_type", "Deck Type:",
c("No Jokers" = "nojoke")
),
# Normal distribution parameters
conditionalPanel(
condition = "input.deck_type == 'nojoke'",
numericInput("spades", "How many spades?", value = 100),
numericInput("clubs", "How many clubs?", value = 100),
numericInput("hearts", "How many hearts?", value = 100),
numericInput("diamonds", "How many diamonds?", value = 100)
)
),
mainPanel(
# Output: Print the test result ----
verbatimTextOutput("test_result")
)
)
# Define server logic required to draw a histogram
server <- function(input, output) {
output$test_result <- renderPrint({
if (input$deck_type == 'nojoke')
{
probs <- c(0.25, 0.25, 0.25, 0.25)
observed <- c(input$spades, input$clubs, input$hearts, input$diamonds)
results <- chisq.test(observed, p = probs)
}
results
})
}
ui <- fluidPage(
sidebarPanel(
# Input: Select the random distribution type ----
radioButtons("deck_type", "Deck Type:",
c("No Jokers" = "nojoke")
),
# Normal distribution parameters
conditionalPanel(
condition = "input.deck_type == 'nojoke'",
numericInput("spades", "How many spades?", value = 100),
numericInput("clubs", "How many clubs?", value = 100),
numericInput("hearts", "How many hearts?", value = 100),
numericInput("diamonds", "How many diamonds?", value = 100)
)
),
mainPanel(
# Output: Print the test result ----
verbatimTextOutput("test_result")
)
)
traceback()
# Run the application
shinyApp(ui = ui, server = server)
install.packages("shiny")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
# Define UI for random distribution app ----
ui <- fluidPage(
sidebarPanel(
# Input: Select the random distribution type ----
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Unif" = "unif",
"Binomial" = "binom",
"Poisson" = "pois",
"Chi-square" = "chisq",
"F" = "f",
"T" = "t")
),
sliderInput("n",
"Sample Size",
min = 1,
max = 10000,
value = 50),
sliderInput("bins",
"Histogram bin count:",
min = 1,
max = 300,
value = 30),
sliderInput("bw",
"Density Bandwidth",
min = 0,
max = 1,
value = 0.5),
# Normal distribution parameters
conditionalPanel(
condition = "input.dist == 'norm'",
sliderInput("mean",
"mean",
min = -100,
max = 100,
value = 0),
sliderInput("sdev",
"sdev",
min = 0,
max = 100,
value = 1)
),
# Normal distribution parameters
conditionalPanel(
condition = "input.dist == 'unif'",
sliderInput("range",
"Minimum and Maximum",
min = -100,
max = 100,
value = c(0, 10)
)
),
conditionalPanel(
condition = "input.dist == 'binom'",
sliderInput("size",
"Number of trials:",
min = 1,
max = 10000,
value = 1),
sliderInput("prob",
"Probability of success:",
min = 0,
max = 1,
value = 0.5)
),
conditionalPanel(
condition = "input.dist == 'pois'",
sliderInput("lambda",
"Lambda (Mean occurrence per interval):",
min = 0,
max = 1000,
value = 10)
),
conditionalPanel(
condition = "input.dist == 'chisq'",
sliderInput("df",
"Degrees of freedom:",
min = 1,
max = 100,
value = 2)
),
conditionalPanel(
condition = "input.dist == 'f'",
sliderInput("df1",
"Degrees of freedom 1:",
min = 1,
max = 100,
value = 1),
sliderInput("df2",
"Degrees of freedom 2:",
min = 1,
max = 100,
value = 1)
),
conditionalPanel(
condition = "input.dist == 't'",
sliderInput("df",
"Degrees of freedom:",
min = 1,
max = 100,
value = 2)
)),
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
plotOutput("histPlot")
)
)
install.packages("remotes")
remotes::install_version("fastmap", version = "1.2.0")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
library(ggplot2)
# Define UI for random distribution app ----
ui <- fluidPage(
sidebarPanel(
# Input: Select the random distribution type ----
radioButtons("dist", "Distribution type:",
c("Normal" = "norm",
"Unif" = "unif",
"Binomial" = "binom",
"Poisson" = "pois",
"Chi-square" = "chisq",
"F" = "f",
"T" = "t")
),
sliderInput("n",
"Sample Size",
min = 1,
max = 10000,
value = 50),
sliderInput("bins",
"Histogram bin count:",
min = 1,
max = 300,
value = 30),
sliderInput("bw",
"Density Bandwidth",
min = 0,
max = 1,
value = 0.5),
# Normal distribution parameters
conditionalPanel(
condition = "input.dist == 'norm'",
sliderInput("mean",
"mean",
min = -100,
max = 100,
value = 0),
sliderInput("sdev",
"sdev",
min = 0,
max = 100,
value = 1)
),
# Normal distribution parameters
conditionalPanel(
condition = "input.dist == 'unif'",
sliderInput("range",
"Minimum and Maximum",
min = -100,
max = 100,
value = c(0, 10)
)
),
conditionalPanel(
condition = "input.dist == 'binom'",
sliderInput("size",
"Number of trials:",
min = 1,
max = 10000,
value = 1),
sliderInput("prob",
"Probability of success:",
min = 0,
max = 1,
value = 0.5)
),
conditionalPanel(
condition = "input.dist == 'pois'",
sliderInput("lambda",
"Lambda (Mean occurrence per interval):",
min = 0,
max = 1000,
value = 10)
),
conditionalPanel(
condition = "input.dist == 'chisq'",
sliderInput("df",
"Degrees of freedom:",
min = 1,
max = 100,
value = 2)
),
conditionalPanel(
condition = "input.dist == 'f'",
sliderInput("df1",
"Degrees of freedom 1:",
min = 1,
max = 100,
value = 1),
sliderInput("df2",
"Degrees of freedom 2:",
min = 1,
max = 100,
value = 1)
),
conditionalPanel(
condition = "input.dist == 't'",
sliderInput("df",
"Degrees of freedom:",
min = 1,
max = 100,
value = 2)
)),
mainPanel(
# Output: Tabset w/ plot, summary, and table ----
plotOutput("histPlot")
)
)
packageVersion("fastmap")
library(fastmap)
packageVersion("fastmap")
remotes::install_version("fastmap", version = "1.2.0")
remotes::install_version("fastmap", version = "1.2.0")
gc()
detach("package:fastmap",umload=TRUE)
detach("package:fastmap",unload=TRUE)
remotes::install_version("fastmap", version = "1.2.0")
remotes::install_version("fastmap", version = "1.2.0")
packageVersion("fastmap")
install.packages("htmltools")
install.packages("htmltools")
remotes::install_version("fastmap", version = "1.2.0")
remove.packages("fastmap", lib = "C:/Users/alexa/AppData/Local/R/win-library/4.3")
remotes::install_version("fastmap", version = "1.2.0")
remove.packages("GLMGWAS")
---
title: "GLM-Based GWAS Analysis"
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("devtools", quietly = TRUE)) install.packages("devtools")
if (!requireNamespace("usethis", quietly = TRUE)) install.packages("usethis")
if (!requireNamespace("roxygen2", quietly = TRUE)) install.packages("roxygen2")
library(stats)
library(devtools)
library(roxygen2)
# Set Working Directory
print(getwd())  # Confirm working directory
# Verify the package directory
print(getwd())  # Check current working directory
print(list.files())  # Check package files exist
# If package files are missing, print an error and stop execution
print(getwd())  # Check current working directory
print(list.files())  # Check package files exist
# If package files are missing, manually navigate to the correct folder in RStudio:
# Session → Set Working Directory → Choose Directory (Select your GLMGWAS folder)
# If the package does not exist, create it
if (!file.exists("DESCRIPTION")) {
usethis::create_package("GLMGWAS")
}
# Generate documentation
# Ensure we are inside a valid package directory
if (!file.exists("DESCRIPTION")) {
stop("Error: Not inside a package directory. Set working directory to GLMGWAS folder.")
}
setwd("C:/Users/alexa/PL_P-545 Statistical Genomics/hw 1/GLMGWAS/man")
knitr::opts_chunk$set(echo = TRUE)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/CROP545_Phenotype.txt")
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("GLMGWAS", quietly = TRUE)) install.packages("GLMGWAS")
library(GLMGWAS)
library(data.table)
library(dplyr)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = Obs)
# Ensure the taxa names match across datasets
taxa_names <- intersect(y$Taxa, C$Taxa)
y <- y %>% filter(Taxa %in% taxa_names) %>% select(Phenotype)
y <- fread("C:/Users/alexa/PL_P-545 - Statistical Genomics/hw 1/CROP545_Phenotype.txt")
# Display the first few rows
head(y)
# Print column names to confirm "Obs" exists
colnames(y)
