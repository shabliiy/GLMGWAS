devtools::package_file()
setwd("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/GLMGWAS")
devtools::package_file()
devtools::build()
devtools::install()
library(GLMGWAS)
knitr::opts_chunk$set(echo = TRUE)
library(stats)
library(data.table)
library(ggplot2)
library(MASS)
library(Matrix)
library(parallel)
library(qqman)
library(car)  # Needed for linear dependence check
genotype_data <- fread("mdp_numeric.txt", header = TRUE)
snp_info <- fread("mdp_SNP_information.txt", header = TRUE)
phenotype_data <- fread("CROP545_Phenotype.txt", header = TRUE)
covariates_data <- fread("CROP545_Covariates.txt", header = TRUE)
# Ensure correct column names in phenotype data
print(colnames(phenotype_data))
phenotype_col <- "Obs"  # Using correct column name from file
# Convert genotype data to numeric (remove SNP IDs)
genotype_numeric <- as.matrix(genotype_data[, -1, with = FALSE])
genotype_numeric <- apply(genotype_numeric, 2, as.numeric)  # Ensure all are numeric
# Remove columns with zero variance (constant SNPs)
genotype_numeric <- genotype_numeric[, apply(genotype_numeric, 2, var, na.rm = TRUE) > 0, drop = FALSE]
# Convert covariates to numeric matrix
covariates_matrix <- as.matrix(covariates_data[, -1, with = FALSE])  # Exclude first column (Taxa)
compute_pcs <- function(X, num_pcs = 10, C = NULL) {
if (ncol(X) == 0) {
stop("Error: All genotype columns have zero variance. Check your data.")
}
pca_res <- prcomp(X, scale. = TRUE)
pcs <- as.data.frame(pca_res$x[, 1:num_pcs])
if (!is.null(C)) {
keep_pcs <- sapply(pcs, function(pc) {
vif_model <- lm(pc ~ ., data = as.data.frame(C))
max(vif(vif_model)) < 10  # Keep PCs with VIF < 10
})
pcs <- pcs[, keep_pcs, drop = FALSE]
}
return(as.matrix(pcs))
}
pca_results <- compute_pcs(genotype_numeric, num_pcs = 10, C = covariates_matrix)
full_covariates <- cbind(covariates_matrix, pca_results)  # Combine covariates & PCs
results <- glm_gwas(phenotype_data[[phenotype_col]], genotype_numeric, full_covariates)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("GLMGWAS", quietly = TRUE)) install.packages("GLMGWAS")
library(GLMGWAS)
library(data.table)
library(dplyr)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = Obs)
# Load genotype data
X <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/mdp_numeric.txt")
X <- as.matrix(X[,-1])  # Remove taxa column and convert to matrix
# Load covariate data
C <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/CROP545_Covariates.txt")
# Load SNP information
snp_info <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/mdp_SNP_information.txt")
colnames(snp_info) <- c("SNP", "Chromosome", "Position")
# Ensure the taxa names match across datasets
taxa_names <- intersect(y$Taxa, C$Taxa)
y <- y %>% filter(Taxa %in% taxa_names) %>% select(Phenotype)
C <- C %>% filter(Taxa %in% taxa_names) %>% select(-Taxa)
# Run PCA for population structure correction
PCs <- PCA_GWAS(X, C)
ls("package:GLMGWAS")
ls("package:GLMGWAS")
devtools::document()  # Generate documentation
devtools::document()  # Generate documentation
devtools::document()  # Generate documentation
devtools::document()  # Generate documentation
devtools::document()  # Generate documentation
devtools::install()   # Reinstall the package
library(GLMGWAS)      # Reload the package
ls("package:GLMGWAS")
setwd("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/GLMGWAS")
list.files()
devtools::document()  # Regenerate documentation
devtools::install()   # Reinstall the package
library(GLMGWAS)      # Load the package
ls("package:GLMGWAS") # Should now list all functions
setwd("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/GLMGWAS")
ls("package:GLMGWAS")
setwd("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/GLMGWAS")
getwd()  # Should return the path to your GLMGWAS folder
list.files()  # Should show "DESCRIPTION", "NAMESPACE", "R/" etc.
devtools::document()  # Regenerate documentation
devtools::install()   # Reinstall the package
library(GLMGWAS)      # Load the package
ls("package:GLMGWAS") # Check if functions are available
devtools::document()
devtools::install()
ls("package:GLMGWAS")
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("GLMGWAS", quietly = TRUE)) install.packages("GLMGWAS")
library(GLMGWAS)
library(data.table)
library(dplyr)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = Obs)
# Load genotype data
X <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/mdp_numeric.txt")
X <- as.matrix(X[,-1])  # Remove taxa column and convert to matrix
# Load covariate data
C <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/CROP545_Covariates.txt")
# Load SNP information
snp_info <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/mdp_SNP_information.txt")
colnames(snp_info) <- c("SNP", "Chromosome", "Position")
# Ensure the taxa names match across datasets
taxa_names <- intersect(y$Taxa, C$Taxa)
y <- y %>% filter(Taxa %in% taxa_names) %>% select(Phenotype)
C <- C %>% filter(Taxa %in% taxa_names) %>% select(-Taxa)
# Run PCA for population structure correction
PCs <- PCA_GWAS(X, C)
# Run PCA for population structure correction
# Check for constant columns in genotype data
summary(X)
# Remove columns with zero variance
X <- X[, apply(X, 2, var) > 0]
# Run PCA after filtering
PCs <- PCA_GWAS(X, C)
PCs <- PCA_GWAS(X, C)
# Combine covariates and principal components
C_combined <- cbind(C, PCs)
# Run GWAS
p_values <- GLM_GWAS(y, X, C_combined)
# Save results with SNP information
results <- data.frame(SNP = colnames(X), p_value = p_values)
results <- merge(results, snp_info, by = "SNP", all.x = TRUE)
fwrite(results, "GWAS_results.txt")
# Display top significant SNPs
head(results[order(results$p_value), ])
# Run GWAS
# Run both GWAS methods
p_values_glm <- GLM_GWAS(y, X, C_combined)
p_values_gwasbycor <- apply(X, 2, function(snp) cor.test(y[[1]], snp)$p.value)
# Save results for both methods
results <- data.frame(SNP = colnames(X),
p_value_GLM = p_values_glm,
p_value_GWASbyCor = p_values_gwasbycor)
# Merge with SNP info
results <- merge(results, snp_info, by = "SNP", all.x = TRUE)
fwrite(results, "GWAS_comparison_results.txt")
# Display top significant SNPs for both methods
head(results[order(results$p_value_GLM), ])
# Save results for both methods
results <- data.frame(SNP = colnames(X),
p_value_GLM = p_values_glm,
p_value_GWASbyCor = p_values_gwasbycor)
# Merge with SNP info
results <- merge(results, snp_info, by = "SNP", all.x = TRUE)
fwrite(results, "GWAS_comparison_results.txt")
# Display top significant SNPs for both methods
head(results[order(results$p_value_GLM), ])
# Visualize the comparison
boxplot(results$p_value_GLM, results$p_value_GWASbyCor,
names = c("GLM_GWAS", "GWASbyCor"),
main = "Comparison of GWAS Methods",
ylab = "p-values", col = c("blue", "red"))
# Save results for both methods
results <- data.frame(SNP = colnames(X),
p_value_GLM = p_values_glm,
p_value_GWASbyCor = p_values_gwasbycor)
# Merge with SNP info
results <- merge(results, snp_info, by = "SNP", all.x = TRUE)
fwrite(results, "GWAS_comparison_results.txt")
# Display top significant SNPs for both methods
head(results[order(results$p_value_GLM), ])
# Display summary statistics
summary(results$p_value_GLM)
summary(results$p_value_GWASbyCor)
# Perform statistical test (Wilcoxon test for paired comparison)
wilcox.test(results$p_value_GLM, results$p_value_GWASbyCor, paired = TRUE)
# Density plot comparison
plot(density(results$p_value_GLM), col="blue", lwd=2, main="GWAS Method Comparison", xlab="p-values")
lines(density(results$p_value_GWASbyCor), col="red", lwd=2)
legend("topright", legend=c("GLM_GWAS", "GWASbyCor"), col=c("blue", "red"), lwd=2)
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("GLMGWAS", quietly = TRUE)) install.packages("GLMGWAS")
library(GLMGWAS)
library(data.table)
library(dplyr)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/CROP545_Phenotype.txt")
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545-Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = Obs)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("GLMGWAS", quietly = TRUE)) install.packages("GLMGWAS")
library(GLMGWAS)
library(data.table)
library(dplyr)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545-Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = Obs)
setwd("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1")
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545-Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = Obs)
knitr::opts_chunk$set(echo = TRUE)
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("GLMGWAS", quietly = TRUE)) install.packages("GLMGWAS")
library(GLMGWAS)
library(data.table)
library(dplyr)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1/CROP545_Phenotype.txt")
if (!requireNamespace("data.table", quietly = TRUE)) install.packages("data.table")
if (!requireNamespace("dplyr", quietly = TRUE)) install.packages("dplyr")
if (!requireNamespace("GLMGWAS", quietly = TRUE)) install.packages("GLMGWAS")
library(GLMGWAS)
library(data.table)
library(dplyr)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545-Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = Obs)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545-Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = obs)
# Load phenotype data
y <- fread("C:/Users/alexa/PL_P-545-Statistical Genomics/hw 1/CROP545_Phenotype.txt")
y <- y %>% rename(Phenotype = Obs)
# The file "logo.png" will be saved in your working directory
setwd("C:/Users/alexa/PL_P-545 – Statistical Genomics/hw 1")
# The file "logo.png" will be saved in your working directory
getwd()
# Load necessary libraries
library(hexSticker)
library(ggplot2)
# Create a simple plot for the logo
p <- ggplot(data.frame(x = c(-1, 1)), aes(x = x)) +
geom_point() +
theme_void()
# Generate the hex sticker
sticker(
subplot = p,
package = "GLMGWAS",
p_size = 20,
s_x = 1, s_y = 0.8, s_width = 1.3,
filename = "logo.png"
)
library(hexSticker)
library(ggplot2)
# Create a simple plot for the sticker background
p <- ggplot(data.frame(x = 1, y = 1), aes(x = x, y = y)) +
geom_point(size = 5) +
theme_void()
# Generate the sticker
sticker(
subplot = p,
package = "GLMGWAS",
p_size = 20,
s_x = 1, s_y = 0.8, s_width = 1.3,
filename = "logo.png"
)
library(hexSticker)
library(ggplot2)
p <- ggplot(data.frame(x = 1, y = 1), aes(x = x, y = y)) +
geom_point(size = 5) +
theme_void()
# Set graphics device
grDevices::png("logo.png", width = 512, height = 512, res = 300)
# Generate the sticker
sticker(
subplot = p,
package = "GLMGWAS",
p_size = 20,
s_x = 1, s_y = 0.8, s_width = 1.3,
filename = "logo.png"
)
dev.off()  # Close the graphics device
library(hexSticker)
library(ggplot2)
# Create a simple ggplot object (background for the sticker)
p <- ggplot(data.frame(x = 1, y = 1), aes(x = x, y = y)) +
geom_point(size = 5, color = "blue") +
theme_void()
# Set graphics device to save as PNG
grDevices::png("logo.png", width = 512, height = 512, res = 300)
# Generate the sticker with text
sticker(
subplot = p,
package = "GLMGWAS",  # Ensure the package name is added
p_size = 25,  # Increase text size
p_color = "white",  # Adjust text color (change if needed)
s_x = 1, s_y = 0.8, s_width = 1.3,  # Positioning
h_fill = "#377eb8",  # Background color
h_color = "black",   # Border color
filename = "logo.png"
)
dev.off()  # Close the graphics device
library(hexSticker)
library(ggplot2)
# Create a simple ggplot object (background for the sticker)
p <- ggplot(data.frame(x = 1, y = 1), aes(x = x, y = y)) +
geom_point(size = 5, color = "blue") +
theme_void()
# Set graphics device to save as PNG
grDevices::png("logo.png", width = 512, height = 512, res = 300)
# Generate the sticker with text
sticker(
subplot = p,
package = "GLMGWAS",  # Ensure the package name is added
p_size = 25,  # Increase text size
p_color = "white",  # Adjust text color (change if needed)
s_x = 1, s_y = 0.8, s_width = 1.3,  # Positioning
h_fill = "#377eb8",  # Background color
h_color = "black",   # Border color
filename = "logo.png"
)
dev.off()  # Close the graphics device
library(hexSticker)
library(ggplot2)
# Create a ggplot object with visible elements
p <- ggplot() +
geom_hex(aes(x = rnorm(100), y = rnorm(100)), bins = 10, fill = "lightblue", color = "black") +
theme_void()
# Save the sticker with the package name
sticker(
subplot = p,
package = "GLMGWAS",  # Ensure package name is added
p_size = 20,  # Adjust font size
p_color = "black",  # Text color
s_x = 1, s_y = 0.8, s_width = 1.3,  # Adjust placement
h_fill = "#377eb8",  # Background color
h_color = "black",  # Border color
filename = "logo.png"
)
if (!requireNamespace("hexSticker", quietly = TRUE)) install.packages("hexSticker")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
library(hexSticker)
library(ggplot2)
library(hexSticker)
library(ggplot2)
# Create a visible ggplot object
p <- ggplot(data.frame(x = rnorm(100), y = rnorm(100)), aes(x, y)) +
geom_point(color = "black", size = 3, alpha = 0.5) +
theme_void()
# Generate the sticker
sticker(
subplot = p,
package = "GLMGWAS",
p_size = 20,
p_color = "white",
s_x = 1, s_y = 0.8, s_width = 1.3,
h_fill = "#377eb8",  # Blue background
h_color = "black",
filename = "logo.png"
)
library(ggplot2)
# Create a hexagonal background shape
hex_df <- data.frame(
x = c(-1, -0.5, 0.5, 1, 0.5, -0.5, -1),
y = c(0, 0.86, 0.86, 0, -0.86, -0.86, 0)
)
# Create the plot
p <- ggplot() +
geom_polygon(data = hex_df, aes(x, y), fill = "#377eb8", color = "black", size = 2) +
annotate("text", x = 0, y = 0, label = "GLMGWAS", size = 10, color = "white", fontface = "bold") +
theme_void() +
theme(plot.background = element_rect(fill = "transparent", color = NA))
# Save the sticker
ggsave("manual_sticker.png", plot = p, width = 3, height = 3, bg = "transparent")
